<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>9 Digital Tech on TMC - 9 Digital Tech Semester 1</title><link>https://tmcdigitech.github.io/dit9a/</link><description>Recent content in 9 Digital Tech on TMC - 9 Digital Tech Semester 1</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit9a/index.xml" rel="self" type="application/rss+xml"/><item><title>Sequence</title><link>https://tmcdigitech.github.io/dit9a/checkpoint1/sequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/checkpoint1/sequence/</guid><description>from The Computing Zone
To be successful Follow this link to hand in your files.
You will need to save each of the tasks in this set in its own file, with a simple naming system:
1. Three in, three out should be in a file named ex1.py, 2. Name swapper should be in a file named ex2.py and so on.
You will be submitting these files to a system which will mark them automatically.</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit9a/gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gettingStarted/software/</guid><description>For this subject, you will need to install Python and Visual Studio Code from the Company Portal.
Open the Company Portal:
Find and install Python:
Find and install Visual Studio Code (NOT Visual Studio Community):
Install the Python extension for Visual Studio Code:</description></item><item><title>More routes</title><link>https://tmcdigitech.github.io/dit9a/bottleBasics/02moreRoutes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/bottleBasics/02moreRoutes/</guid><description> main.py from bottle import route, run @route(&amp;#39;/&amp;#39;) def index(): return &amp;#34;&amp;#34;&amp;#34; &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt; Go to &amp;lt;a href=&amp;#34;/other&amp;#34;&amp;gt;the other page&amp;lt;/a&amp;gt;. &amp;#34;&amp;#34;&amp;#34; @route(&amp;#39;/other&amp;#39;) def other_page(): return &amp;#34;&amp;#34;&amp;#34; &amp;lt;h1&amp;gt;The other page&amp;lt;/h1&amp;gt; Go back to &amp;lt;a href=&amp;#34;/&amp;#34;&amp;gt;the home page&amp;lt;/a&amp;gt;. &amp;#34;&amp;#34;&amp;#34; run(reloader=True, debug=True)</description></item><item><title>Selection</title><link>https://tmcdigitech.github.io/dit9a/checkpoint2/selection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/checkpoint2/selection/</guid><description>from The Computing Zone
To be successful Follow this link to hand in your files.
You will need to save each of the tasks in this set in its own file, with a simple naming system:
9. Advice please should be in a file named ex9.py, 10. Darts should be in a file named ex10.py and so on.
You will be submitting these files to a system which will mark them automatically.</description></item><item><title>04 Templates</title><link>https://tmcdigitech.github.io/dit9a/bottleBasics/04templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/bottleBasics/04templates/</guid><description>This example shows how a template can be used to generate lots of individual pages with a common structure.
main.py</description></item><item><title>Full HTML Example</title><link>https://tmcdigitech.github.io/dit9a/bottleBasics/03fullHtmlExample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/bottleBasics/03fullHtmlExample/</guid><description>This example is a complete HTML page.
base.html &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- Required meta tags --&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;!-- Bootstrap CSS --&amp;gt; &amp;lt;link href=&amp;#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; integrity=&amp;#34;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt; &amp;lt;!-- Bootstrap Bundle with Popper --&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js&amp;#34; integrity=&amp;#34;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</description></item><item><title>Iteration</title><link>https://tmcdigitech.github.io/dit9a/checkpoint3/iteration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/checkpoint3/iteration/</guid><description>from The Computing Zone
To be successful Follow this link to hand in your files.
You will need to save each of the tasks in this set in its own file, with a simple naming system:
13. Lines cheat should be in a file named ex13.py, 14. Cricket over should be in a file named ex14.py and so on.
You will be submitting these files to a system which will mark them automatically.</description></item><item><title>01 Hello, World!</title><link>https://tmcdigitech.github.io/dit9a/bottleBasics/01helloWorld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/bottleBasics/01helloWorld/</guid><description>Make a new file named hello.py and enter the following code: 1 2 3 4 5 6 7 from bottle import route, run @route(&amp;#39;/&amp;#39;) def index(): return &amp;#34;Hello, world!&amp;#34; run(reloader=True, debug=True)
To run your file, you should be able to press the play button in the top right of the window. Failing that, from the file explorer on the left, right click on your file and choose Open in Integrated Terminal.</description></item><item><title>bottle.run()</title><link>https://tmcdigitech.github.io/dit9a/glossary/bottleRun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/glossary/bottleRun/</guid><description>run(reloader=True, debug=True) You can just say run(), and it will begin using a set of defaults, but we have customised the server slightly. The reloader flag tells the server to restart every time we change a code file, which saves us from turning it off and on again every time we modify our code. Very handy for development! The debug flag does a something thing for templates.
There are a lot of other flags you can use, but two that you might find handy are:</description></item><item><title>Strings</title><link>https://tmcdigitech.github.io/dit9a/reference/strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/reference/strings/</guid><description>adapted from Medium.com
Let us see the different operations that can be performed on the below string.
word = &amp;#39;Sample&amp;#39; len(word) # 6 +---+---+---+---+---+---+ | S | a | m | p | l | e | +---+---+---+---+---+---+ 0 1 2 3 4 5 6 -6 -5 -4 -3 -2 -1 1 Concatenation Join a string with another string
word = &amp;#39;Sample&amp;#39; word + &amp;#39; &amp;#39; + &amp;#39;trick&amp;#39; # &amp;#39;Sample trick&amp;#39; 2 Indexed Access of Strings A string in a python can be indexed to perform operations on the string.</description></item><item><title>URLs</title><link>https://tmcdigitech.github.io/dit9a/glossary/URLs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/glossary/URLs/</guid><description>\[\overbrace{\text{https}}^{\text{scheme}}\text{://} \overbrace{\text{tmcdigitech.github.io}}^{\text{address}} \text{:}\overbrace{\text{8080}}^{\text{port}} \overbrace{\text{/dit10a/glossary/URLs/}}^{\text{path/endpoint}}\] The scheme tells the browser how it will connect to the server. This is typically https, but could also be http, ftp, mailto, or any number of others.
The address tells the browser where to send the request, i.e. which address. Addresses can be in the form of domain names like google.com, or IP addresses like 192.168.0.1.
google.com is like saying Thomas More College.</description></item></channel></rss>